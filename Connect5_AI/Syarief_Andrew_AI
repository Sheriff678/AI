import java.util.ArrayList;

public class Syarief_Andrew_AI extends Player
{
    private char opposition;
    private char color;
    private final char neutral = '-';
    private Board board;

    private Move block = new Move((int)(Math.random()*7), (int)(Math.random()*7));
    private Move attack = new Move((int)(Math.random()*7), (int)(Math.random()*7));

    public Syarief_Andrew_AI(Board board, char color)
    {
        super("RizBiz", color);
        this.board = board;
        this.color = color;

        if (color == 'R'){opposition = 'B';}
        else if (color == 'B'){opposition = 'R';}
    }


    public Move getMove(Board board)
    {
        Move makeMove = new Move((int)(Math.random()*7), (int)(Math.random()*7));

        do {
            int friendly = makeMove(board, color);
            int enemy = makeMove(board, opposition);

            if (friendly > enemy)
                makeMove = attack;

            else if (friendly < enemy)
                makeMove = block;

            else if (friendly == enemy)
                makeMove = block;

        }while(board.isFull(makeMove));

        return makeMove;

    }

    private int makeMove(Board grid, char color)
    {
        int priority = 0;

        int count = 0;
        for(int z=0; z < Board.Z_SIZE; z++)
        {
            for (int y = 0; y < Board.Y_SIZE; y++)
            {
                for (int x = 0; x < Board.X_SIZE; x++)
                {
                    if(board.getBoard()[z][y][x] == color)
                        count++;
                }
            }
        }

        //----------Horizontal-LEFT-RIGHT---------//
        for(int z=0; z < Board.Z_SIZE; z++)
        {
            for(int y=0; y < Board.Y_SIZE; y++)
            {
                for(int x=0; x+5 < Board.X_SIZE; x++)
                {

                    if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y][x + 1] == color && grid.getBoard()[z][y][x + 2] == color && grid.getBoard()[z][y][x + 3] == color && grid.getBoard()[z][y][x + 4] == color && grid.getBoard()[z][y][x + 5] == neutral)
                    {
                        if(this.color == color)
                        {
                            attack = new Move(x + 5, z);
                            priority = 5;
                        }

                        else if(this.opposition == color)
                        {
                            block = new Move(x + 5, z);
                            priority = 6;
                        }

                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y][x + 1] == color && grid.getBoard()[z][y][x + 2] == color && grid.getBoard()[z][y][x + 3] == color && grid.getBoard()[z][y][x + 4] == neutral)
                    {
                        if(priority < 4)
                        {
                            if (this.color == color)
                            {
                                attack = new Move(x + 4, z);
                                priority = 4;
                            }

                            else if (this.opposition == color)
                            {
                                block = new Move(x + 4, z);
                                priority = 5;
                            }


                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y][x + 1] == color && grid.getBoard()[z][y][x + 2] == color && grid.getBoard()[z][y][x + 3] == neutral)
                    {
                        if(priority < 3) {
                            if (this.color == color)
                            {
                                attack = new Move(x + 3, z);
                                priority = 3;
                            }

                            else if (this.opposition == color)
                            {
                                block = new Move(x + 3, z);
                                priority = 4;
                            }


                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y][x + 1] == color && grid.getBoard()[z][y][x + 2] == neutral)
                    {
                        if(priority < 2)
                        {
                            if (this.color == color)
                            {
                                attack = new Move(x + 2, z);
                                priority = 2;
                            }

                            else if (this.opposition == color)
                            {
                                block = new Move(x + 2, z);
                                priority = 3;
                            }

                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y][x + 1] == neutral)
                    {
                        if(this.color == color)
                            attack = new Move(x+1, z);

                        if(count < 3)
                            priority = 5;

                        else
                            priority = 1;
                    }

                    if(count == 0)
                    {
                        attack = new Move((int)(Math.random()*3)+2, (int)(Math.random()*3)+2);

                        priority = 5;
                    }

                }
            }
        }

        //----------Horizontal-UP-DOWN---------//
        for(int z=0; z+5 < Board.Z_SIZE; z++)
        {
            for(int y=0; y < Board.Y_SIZE; y++)
            {
                for(int x=0; x < Board.X_SIZE; x++)
                {

                    if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x] == color && grid.getBoard()[z + 2][y][x] == color && grid.getBoard()[z + 3][y][x] == color && grid.getBoard()[z + 4][y][x] == color && grid.getBoard()[z + 5][y][x] == neutral)
                    {
                        if(this.color == color)
                        {
                            attack = new Move(x, z + 5);
                            priority = 5;
                        }

                        else if(this.opposition == color)
                        {
                            block = new Move(x, z + 5);
                            priority = 6;
                        }


                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x] == color && grid.getBoard()[z + 2][y][x] == color && grid.getBoard()[z + 3][y][x] == color && grid.getBoard()[z + 4][y][x] == neutral)
                    {
                        if(priority < 4)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x, z + 4);
                                priority = 4;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x, z + 4);
                                priority = 5;
                            }

                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x] == color && grid.getBoard()[z + 2][y][x] == color && grid.getBoard()[z + 3][y][x] == neutral)
                    {
                        if(priority < 3)
                        {
                            if(this.color == color) {
                                attack = new Move(x, z + 3);
                                priority = 3;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x, z + 3);
                                priority = 4;
                            }
                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x] == color && grid.getBoard()[z + 2][y][x] == neutral)
                    {
                        if(priority < 2)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x, z + 2);
                                priority = 2;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x, z + 2);
                                priority = 3;
                            }
                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x] == neutral)
                    {
                        if(this.color == color)
                            attack = new Move(x, z+1);

                        if(count < 3)
                            priority = 5;

                        else
                            priority = 1;
                    }

                    if(count == 0)
                    {
                        attack = new Move((int)(Math.random()*3)+2, (int)(Math.random()*3)+2);

                        priority = 5;
                    }

                }
            }
        }

        //----------Vertical---------//
        for(int z=0; z < Board.Z_SIZE; z++)
        {
            for(int y=0; y+5 < Board.Y_SIZE; y++)
            {
                for(int x=0; x < Board.X_SIZE; x++)
                {
                    if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y + 1][x] == color && grid.getBoard()[z][y + 2][x] == color && grid.getBoard()[z][y + 3][x] == color && grid.getBoard()[z][y + 4][x] == color && grid.getBoard()[z][y + 5][x] == neutral)
                    {
                        if(this.color == color)
                        {
                            attack = new Move(x, z);
                            priority = 5;
                        }

                        else if(this.opposition == color)
                        {
                            block = new Move(x, z);
                            priority = 6;
                        }

                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y + 1][x] == color && grid.getBoard()[z][y + 2][x] == color && grid.getBoard()[z][y + 3][x] == color && grid.getBoard()[z][y + 4][x] == neutral)
                    {
                        if(priority < 4)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x, z);
                                priority = 4;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x, z);
                                priority = 5;
                            }
                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y + 1][x] == color && grid.getBoard()[z][y + 2][x] == color && grid.getBoard()[z][y + 3][x] == neutral)
                    {
                        if (priority < 3)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x, z);
                                priority = 3;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x, z);
                                priority = 4;
                            }
                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y + 1][x] == color && grid.getBoard()[z][y + 2][x] == neutral)
                    {
                        if (priority < 2)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x, z);
                                priority = 2;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x, z);
                                priority = 3;
                            }

                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y+1][x] == neutral)
                    {
                        if(this.color == color)
                            attack = new Move(x, z);


                        if(count < 3)
                            priority = 5;

                        else
                            priority = 1;
                    }

                    if(count == 0)
                    {
                        attack = new Move((int)(Math.random()*3)+2, (int)(Math.random()*3)+2);

                        priority = 5;
                    }

                }
            }
        }

        //---------Diagonal-UP-DOWN-------//
        for(int z=0; z+5 < Board.Z_SIZE; z++)
        {
            for(int y=0; y < Board.Y_SIZE; y++)
            {
                for(int x=0; x+5 < Board.X_SIZE; x++)
                {
                    if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x + 1] == color && grid.getBoard()[z + 2][y][x + 2] == color && grid.getBoard()[z + 3][y][x + 3] == color && grid.getBoard()[z + 4][y][x + 4] == color && grid.getBoard()[z + 5][y][x + 5] == neutral)
                    {
                        if(this.color == color)
                        {
                            attack = new Move(x + 5, z + 5);
                            priority = 5;
                        }

                        else if(this.opposition == color)
                        {
                            block = new Move(x + 5, z + 5);
                            priority = 6;
                        }


                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x + 1] == color && grid.getBoard()[z + 2][y][x + 2] == color && grid.getBoard()[z + 3][y][x + 3] == color && grid.getBoard()[z + 4][y][x + 4] == neutral && grid.getBoard()[z + 5][y][x + 5] == neutral)
                    {
                        if(priority > 4)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x + 4, z + 4);
                                priority = 4;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x + 4, z + 4);
                                priority = 5;
                            }

                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x + 1] == color && grid.getBoard()[z + 2][y][x + 2] == color && grid.getBoard()[z + 3][y][x + 3] == neutral && grid.getBoard()[z + 4][y][x + 4] == neutral && grid.getBoard()[z + 5][y][x + 5] == neutral)
                    {
                        if (priority < 3)
                        {
                            if(this.color == color) {
                                attack = new Move(x + 3, z + 3);
                                priority = 3;
                            }


                            else if(this.opposition == color)
                            {
                                block = new Move(x + 3, z + 3);
                                priority = 4;
                            }

                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x + 1] == color && grid.getBoard()[z + 2][y][x + 2] == neutral && grid.getBoard()[z + 3][y][x + 3] == neutral && grid.getBoard()[z + 4][y][x + 4] == neutral && grid.getBoard()[z + 5][y][x + 5] == neutral)
                    {
                        if (priority < 2)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x + 2, z + 2);
                                priority = 2;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x + 2, z + 2);
                                priority = 3;
                            }
                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y][x + 1] == neutral)
                    {
                        if(this.color == color)
                            attack = new Move(x+1, z+1);


                        if(count < 3)
                            priority = 5;

                        else
                            priority = 1;
                    }

                    if(count == 0)
                    {
                        attack = new Move((int)(Math.random()*3)+2, (int)(Math.random()*3)+2);

                        priority = 5;
                    }

                }
            }
        }

        //---------Diagonal-DOWN-UP-------//
        for(int z=Board.Z_SIZE-1; z-5> 0; z--)
        {
            for(int y=0; y < Board.Y_SIZE; y++)
            {
                for(int x=0; x+5 < Board.X_SIZE; x++)

                {
                    if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y][x + 1] == color && grid.getBoard()[z - 2][y][x + 2] == color && grid.getBoard()[z - 3][y][x + 3] == color && grid.getBoard()[z - 4][y][x + 4] == color && grid.getBoard()[z - 5][y][x + 5] == neutral)
                    {
                        if(this.color == color)
                        {
                            attack = new Move(x + 5, z - 5);
                            priority = 5;
                        }

                        else if(this.opposition == color)
                        {
                            block = new Move(x + 5, z - 5);
                            priority = 6;
                        }

                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y][x + 1] == color && grid.getBoard()[z - 2][y][x + 2] == color && grid.getBoard()[z - 3][y][x + 3] == color && grid.getBoard()[z - 4][y][x + 4] == neutral)
                    {
                        if(priority > 4)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x + 4, z - 4);
                                priority = 4;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x + 4, z - 4);
                                priority = 5;
                            }

                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y][x + 1] == color && grid.getBoard()[z - 2][y][x + 2] == color && grid.getBoard()[z - 3][y][x + 3] == neutral)
                    {
                        if (priority < 3)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x + 3, z - 3);
                                priority = 3;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x + 3, z - 3);
                                priority = 4;
                            }

                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y][x + 1] == color && grid.getBoard()[z - 2][y][x + 2] == neutral)
                    {
                        if (priority < 2)
                        {
                            if(this.color == color)
                            {
                                attack = new Move(x + 2, z - 2);
                                priority = 2;
                            }

                            else if(this.opposition == color)
                            {
                                block = new Move(x + 2, z - 2);
                                priority = 3;
                            }
                        }
                    }

                    else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y][x + 1] == neutral)
                    {
                        if(this.color == color)
                            attack = new Move(x+1, z-1);

                        if(count < 3)
                            priority = 5;

                        else
                            priority = 1;
                    }

                    if(count == 0)
                    {
                        attack = new Move((int)(Math.random()*3)+2, (int)(Math.random()*3)+2);

                        priority = 5;
                    }

                }
            }
        }

        /*//--------V-Diagonal-UP-DOWN-WALL-1----//
        for(int z=0; z < Board.Z_SIZE; z++)
        {
            for(int y=0; y+5 < Board.Y_SIZE; y++)
            {
                for(int x=0; x+5 < Board.X_SIZE; x++)
                {
                        if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y + 1][x + 1] == color && grid.getBoard()[z][y + 2][x + 2] == color && grid.getBoard()[z][y + 3][x + 3] == color && grid.getBoard()[z][y + 4][x + 4] == color && grid.getBoard()[z][y + 5][x + 5] == neutral)
                        {
                            bestMove = new Move(x+5, z);
                            priority = 5;
                        }

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y + 1][x + 1] == color && grid.getBoard()[z][y + 2][x + 2] == color && grid.getBoard()[z][y + 3][x + 3] == color && grid.getBoard()[z][y + 4][x + 4] == neutral)
                        {
                            bestMove = new Move(x+4, z);
                            priority = 4;
                        }

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y + 1][x] == color && grid.getBoard()[z][y + 2][x] == color && grid.getBoard()[z][y + 3][x + 3] == neutral)
                        {
                            if (priority < 3)
                            {
                                bestMove = new Move(x+3, z);
                                priority = 3;
                            }
                        }

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y + 1][x + 1] == color && grid.getBoard()[z][y + 2][x + 2] == neutral)
                        {
                            if (priority < 2)
                            {
                                bestMove = new Move(x+2, z);
                                priority = 2;
                            }
                        }

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y + 1][x + 1] == neutral)
                        {

                        }

                        if(priority == 5)
                            return bestMove;

                }
            }
        }

        //--------V-Diagonal-DOWN-UP-WALL-1----//
        for(int z=0; z < Board.Z_SIZE; z++)
        {
            for(int y=Board.Y_SIZE-1; y-5 > 0; y--)
            {
                for(int x=0; x+5 < Board.X_SIZE; x++)
                {

                        if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y - 1][x + 1] == color && grid.getBoard()[z][y - 2][x + 2] == color && grid.getBoard()[z][y - 3][x + 3] == color && grid.getBoard()[z][y - 4][x + 4] == color && grid.getBoard()[z][y - 5][x + 5] == neutral)
                        {
                            bestMove = new Move(x+5, z);
                            priority = 5;
                        }

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y - 1][x + 1] == color && grid.getBoard()[z][y - 2][x + 2] == color && grid.getBoard()[z][y - 3][x + 3] == color && grid.getBoard()[z][y - 4][x + 4] == neutral && grid.getBoard()[z][y - 5][x + 5] == neutral)
                        {
                            bestMove = new Move(x+4, z);
                            priority = 4;
                        }

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y - 1][x] == color && grid.getBoard()[z][y - 2][x] == color && grid.getBoard()[z][y - 3][x + 3] == neutral && grid.getBoard()[z][y - 4][x + 4] == neutral && grid.getBoard()[z][y - 5][x + 5] == neutral)
                        {
                            if (priority < 3)
                            {
                                bestMove = new Move(x+3, z);
                                priority = 3;
                            }
                        }

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y - 1][x + 1] == color && grid.getBoard()[z][y - 2][x + 2] == neutral && grid.getBoard()[z][y - 3][x + 3] == neutral && grid.getBoard()[z][y - 4][x + 4] == neutral && grid.getBoard()[z][y - 5][x + 5] == neutral)
                        {
                            if (priority < 2)
                            {
                                bestMove = new Move(x+2, z);
                                priority = 2;
                            }
                        }

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z][y - 1][x + 1] == neutral && grid.getBoard()[z][y - 2][x + 2] == neutral && grid.getBoard()[z][y - 3][x + 3] == neutral && grid.getBoard()[z][y - 4][x + 4] == neutral && grid.getBoard()[z][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 1;

                        if(priority == 5)
                            return bestMove;


                }
            }
        }

        //--------V-Diagonal-DOWN-UP-WALL-2----//
        for(int z=Board.Z_SIZE-1; z-5 > 0; z--)
        {
            for(int y=Board.Y_SIZE-1; y-5 > 0; y--)
            {
                for(int x=0; x < Board.X_SIZE; x++)
                {
                    if(z > 5)
                    {
                        if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x] == color && grid.getBoard()[z - 2][y - 2][x] == color && grid.getBoard()[z - 3][y - 3][x] == color && grid.getBoard()[z - 4][y - 4][x] == color && grid.getBoard()[z - 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 5;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x] == color && grid.getBoard()[z - 2][y - 2][x] == color && grid.getBoard()[z - 3][y - 3][x] == color && grid.getBoard()[z - 4][y - 4][x] == neutral && grid.getBoard()[z - 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 4;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x] == color && grid.getBoard()[z - 2][y - 2][x] == color && grid.getBoard()[z - 3][y - 3][x] == neutral && grid.getBoard()[z - 4][y - 4][x] == neutral && grid.getBoard()[z - 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 3;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x] == color && grid.getBoard()[z - 2][y - 2][x] == neutral && grid.getBoard()[z - 3][y - 3][x] == neutral && grid.getBoard()[z - 4][y - 4][x] == neutral && grid.getBoard()[z - 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 2;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x] == neutral && grid.getBoard()[z - 2][y - 2][x] == neutral && grid.getBoard()[z - 3][y - 3][x] == neutral && grid.getBoard()[z - 4][y - 4][x] == neutral && grid.getBoard()[z - 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 1;

                        else
                            bestMove = new Move(x, z) += 0;
                    }

                }
            }
        }

        //--------V-Diagonal--UP-DOWN-WALL-2---//
        for(int z=0; z+5 < Board.Z_SIZE; z++)
        {
            for(int y=Board.Y_SIZE-1; y-5 > 0; y--)
            {
                for(int x=0; x < Board.X_SIZE; x++)
                {
                    if(z < 3)
                    {
                        if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x] == color && grid.getBoard()[z + 2][y - 2][x] == color && grid.getBoard()[z + 3][y - 3][x] == color && grid.getBoard()[z + 4][y - 4][x] == color && grid.getBoard()[z + 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 5;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x] == color && grid.getBoard()[z + 2][y - 2][x] == color && grid.getBoard()[z + 3][y - 3][x] == color && grid.getBoard()[z + 4][y - 4][x] == neutral && grid.getBoard()[z + 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 4;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x] == color && grid.getBoard()[z + 2][y - 2][x] == color && grid.getBoard()[z + 3][y - 3][x] == neutral && grid.getBoard()[z + 4][y - 4][x] == neutral && grid.getBoard()[z + 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 3;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x] == color && grid.getBoard()[z + 2][y - 2][x] == neutral && grid.getBoard()[z + 3][y - 3][x] == neutral && grid.getBoard()[z + 4][y - 4][x] == neutral && grid.getBoard()[z + 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 2;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x] == neutral && grid.getBoard()[z + 2][y - 2][x] == neutral && grid.getBoard()[z + 3][y - 3][x] == neutral && grid.getBoard()[z + 4][y - 4][x] == neutral && grid.getBoard()[z + 5][y - 5][x] == neutral)
                            bestMove = new Move(x, z) += 1;

                        else
                            bestMove = new Move(x, z) += 0;
                    }

                }
            }
        }

        //--------V-IDK-ANYMORE---------//
        for(int z=Board.Z_SIZE-1; z-5 > 0; z--)
        {
            for(int y=Board.Y_SIZE-1; y-5 > 0; y--)
            {
                for(int x=0; x+5 < Board.X_SIZE; x++)
                {
                    if(z > 5 && x < 3)
                    {
                        if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x + 1] == color && grid.getBoard()[z - 2][y - 2][x + 2] == color && grid.getBoard()[z - 3][y - 3][x + 3] == color && grid.getBoard()[z - 4][y - 4][x + 4] == color && grid.getBoard()[z - 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 5;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x + 1] == color && grid.getBoard()[z - 2][y - 2][x + 2] == color && grid.getBoard()[z - 3][y - 3][x + 3] == color && grid.getBoard()[z - 4][y - 4][x + 4] == neutral && grid.getBoard()[z - 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 4;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x + 1] == color && grid.getBoard()[z - 2][y - 2][x + 2] == color && grid.getBoard()[z - 3][y - 3][x + 3] == neutral && grid.getBoard()[z - 4][y - 4][x + 4] == neutral && grid.getBoard()[z - 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 3;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x + 1] == color && grid.getBoard()[z - 2][y - 2][x + 2] == neutral && grid.getBoard()[z - 3][y - 3][x + 3] == neutral && grid.getBoard()[z - 4][y - 4][x + 4] == neutral && grid.getBoard()[z - 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 2;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y - 1][x + 1] == neutral && grid.getBoard()[z - 2][y - 2][x + 2] == neutral && grid.getBoard()[z - 3][y - 3][x + 3] == neutral && grid.getBoard()[z - 4][y - 4][x + 4] == neutral && grid.getBoard()[z - 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 1;

                        else
                            bestMove = new Move(x, z) += 0;
                    }

                }
            }
        }

        //--------V-IDK-ANYMORE-2--------//
        for(int z=Board.Z_SIZE-1; z-5 > 0; z--)
        {
            for(int y=0; y+5 < Board.Y_SIZE; y++)
            {
                for(int x=0; x+5 < Board.X_SIZE; x++)
                {
                    if(z > 5 && x < 3)
                    {
                        if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y + 1][x + 1] == color && grid.getBoard()[z - 2][y + 2][x + 2] == color && grid.getBoard()[z - 3][y + 3][x + 3] == color && grid.getBoard()[z - 4][y + 4][x + 4] == color && grid.getBoard()[z - 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 5;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y + 1][x + 1] == color && grid.getBoard()[z - 2][y + 2][x + 2] == color && grid.getBoard()[z - 3][y + 3][x + 3] == color && grid.getBoard()[z - 4][y + 4][x + 4] == neutral && grid.getBoard()[z - 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 4;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y + 1][x + 1] == color && grid.getBoard()[z - 2][y + 2][x + 2] == color && grid.getBoard()[z - 3][y + 3][x + 3] == neutral && grid.getBoard()[z - 4][y + 4][x + 4] == neutral && grid.getBoard()[z - 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 3;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y + 1][x + 1] == color && grid.getBoard()[z - 2][y + 2][x + 2] == neutral && grid.getBoard()[z - 3][y + 3][x + 3] == neutral && grid.getBoard()[z - 4][y + 4][x + 4] == neutral && grid.getBoard()[z - 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 2;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z - 1][y + 1][x + 1] == neutral && grid.getBoard()[z - 2][y + 2][x + 2] == neutral && grid.getBoard()[z - 3][y + 3][x + 3] == neutral && grid.getBoard()[z - 4][y + 4][x + 4] == neutral && grid.getBoard()[z - 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 1;

                        else
                            bestMove = new Move(x, z) += 0;
                    }

                }
            }
        }

        //--------V-WTF-AM-I-DOING-------//
        for(int z=0; z+5 < Board.Z_SIZE; z++)
        {
            for(int y=0; y+5 < Board.Y_SIZE; y++)
            {
                for(int x=0; x+5 < Board.X_SIZE; x++)
                {
                    if(z < 3 && x < 3)
                    {
                        if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y + 1][x + 1] == color && grid.getBoard()[z + 2][y + 2][x + 2] == color && grid.getBoard()[z + 3][y + 3][x + 3] == color && grid.getBoard()[z + 4][y + 4][x + 4] == color && grid.getBoard()[z + 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 5;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y + 1][x + 1] == color && grid.getBoard()[z + 2][y + 2][x + 2] == color && grid.getBoard()[z + 3][y + 3][x + 3] == color && grid.getBoard()[z + 4][y + 4][x + 4] == neutral && grid.getBoard()[z + 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 4;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y + 1][x + 1] == color && grid.getBoard()[z + 2][y + 2][x + 2] == color && grid.getBoard()[z + 3][y + 3][x + 3] == neutral && grid.getBoard()[z + 4][y + 4][x + 4] == neutral && grid.getBoard()[z + 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 3;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y + 1][x + 1] == color && grid.getBoard()[z + 2][y + 2][x + 2] == neutral && grid.getBoard()[z + 3][y + 3][x + 3] == neutral && grid.getBoard()[z + 4][y + 4][x + 4] == neutral && grid.getBoard()[z + 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 2;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y + 1][x + 1] == neutral && grid.getBoard()[z + 2][y + 2][x + 2] == neutral && grid.getBoard()[z + 3][y + 3][x + 3] == neutral && grid.getBoard()[z + 4][y + 4][x + 4] == neutral && grid.getBoard()[z + 5][y + 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 1;

                        else
                            bestMove = new Move(x, z) += 0;
                    }

                }
            }
        }

        //--------V-WTF-AM-I-DOING-2-----//
        for(int z=0; z+5 < Board.Z_SIZE; z++)
        {
            for(int y=Board.Y_SIZE-1; y-5 > 0; y--)
            {
                for(int x=0; x+5 < Board.X_SIZE; x++)
                {
                    if(z < 3 && x < 3)
                    {
                        if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x + 1] == color && grid.getBoard()[z + 2][y - 2][x + 2] == color && grid.getBoard()[z + 3][y - 3][x + 3] == color && grid.getBoard()[z + 4][y - 4][x + 4] == color && grid.getBoard()[z + 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 5;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x + 1] == color && grid.getBoard()[z + 2][y - 2][x + 2] == color && grid.getBoard()[z + 3][y - 3][x + 3] == color && grid.getBoard()[z + 4][y - 4][x + 4] == neutral && grid.getBoard()[z + 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 4;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x + 1] == color && grid.getBoard()[z + 2][y - 2][x + 2] == color && grid.getBoard()[z + 3][y - 3][x + 3] == neutral && grid.getBoard()[z + 4][y - 4][x + 4] == neutral && grid.getBoard()[z + 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 3;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x + 1] == color && grid.getBoard()[z + 2][y - 2][x + 2] == neutral && grid.getBoard()[z + 3][y - 3][x + 3] == neutral && grid.getBoard()[z + 4][y - 4][x + 4] == neutral && grid.getBoard()[z + 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 2;

                        else if (grid.getBoard()[z][y][x] == color && grid.getBoard()[z + 1][y - 1][x + 1] == neutral && grid.getBoard()[z + 2][y - 2][x + 2] == neutral && grid.getBoard()[z + 3][y - 3][x + 3] == neutral && grid.getBoard()[z + 4][y - 4][x + 4] == neutral && grid.getBoard()[z + 5][y - 5][x + 5] == neutral)
                            bestMove = new Move(x, z) += 1;

                        else
                            bestMove = new Move(x, z) += 0;
                    }

                }
            }
        }*/

        return priority;
    }


    @Override
    public Player freshCopy()
    {
        return new Syarief_Andrew_AI(board, color);
    }

}
