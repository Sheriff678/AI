package com.company;
public class P3_AI_SE_AC extends Player
{
    private char color, opposition;
    private final char neutral = '-';
    private Board board;

    private Move block = new Move((int) (Math.random() * 7), (int) (Math.random() * 7));
    private Move attack = new Move((int) (Math.random() * 7), (int) (Math.random() * 7));

    public P3_AI_SE_AC(Board board, char color){
        super("Period 3 Artificial Intelligence Made By Syarief E. & Andrew C.", color);
        this.board = board; this.color = color;
        if (color == 'R'){opposition = 'B';} else if (color == 'B'){opposition = 'R';}
    }

    public Move getMove(Board board)
    {
        Move makeMove = new Move((int)(Math.random()*7), (int)(Math.random()*7));
        do{
            int friendly = makeMove();
            int enemy = makeMove();

            System.out.println("Friendly: "+friendly+"\t Enemy: "+enemy);

            if (friendly > enemy){makeMove = attack; System.out.println("Attack");}
            else if (friendly <= enemy){makeMove = block; System.out.println("Block");}

            System.out.println("Attack: ("+attack.getX()+", "+attack.getZ()+") \t Block: ("+block.getX()+", "+block.getZ()+")\n");

            if(board.isFull(makeMove))
            {
                block = new Move((int) (Math.random() * 7), (int) (Math.random() * 7));
                attack = new Move((int) (Math.random() * 7), (int) (Math.random() * 7));
            }

        }while(board.isFull(makeMove));

        return makeMove;
    }

    private int makeMove()
    {
        int priority = 0, counter = 0, allied = 0, enemy = 0;
        
        int count = 0; for(int z=0; z < 8; z++){for (int y = 0; y < 7; y++){for (int x = 0; x < 8; x++){if(board.getBoard()[z][y][x] == 'R' || board.getBoard()[z][y][x] == 'B'){count++;}}}}
        if(count == 0){attack = new Move((int)(Math.random()*3)+2, (int)(Math.random()*3)+2); return 6;}
        
        // Flat-Horizontal //
        for(int z = 0; z < 8; z++) {
            for (int y = 0; y < 7; y++) {
                // Left to Right //
                for (int x = 0; x < 8; x++) {
                    if(x + counter < 8){
                        if(board.getBoard()[z][y][x + counter] != neutral)
                        {
                            if(board.getBoard()[z][y][x + counter] == color){allied++;}
                            else if(board.getBoard()[z][y][x + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z][y][x + counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){priority = allied; attack = new Move(x + allied, z);}
                            else if(enemy >= allied && priority < enemy){priority = enemy; block = new Move(x + allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x + counter >= 8){counter = 0;}
                }
                allied = enemy = 0;
                // Right to Left //
                for (int x = 7; x >= 0; x--) {
                    if(x - counter >= 0){
                        if(board.getBoard()[z][y][x - counter] != neutral)
                        {
                            if(board.getBoard()[z][y][x - counter] == color){allied++;}
                            else if(board.getBoard()[z][y][x - counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z][y][x - counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){priority = allied; attack = new Move(x - allied, z);}
                            else if(enemy >= allied && priority < enemy){priority = enemy; block = new Move(x - allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x - counter < 0){counter = 0;}
                }
            }
        }
        
        allied = enemy = counter = 0;

        // Flat-Vertical //
        for(int x = 0; x < 8; x++) {
            for (int y = 0; y < 7; y++) {
                // Left to Right //
                for (int z = 0; z < 8; z++) {
                    if(z + counter < 8){
                        if(board.getBoard()[z + counter][y][x] != neutral)
                        {
                            if(board.getBoard()[z + counter][y][x] == color){allied++;}
                            else if(board.getBoard()[z + counter][y][x] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z + counter][y][x] == neutral)
                        {
                            if(allied > enemy && priority < allied){priority = allied; attack = new Move(x, z + allied);}
                            else if(enemy >= allied && priority < enemy){priority = enemy; block = new Move(x, z + enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if(z + counter >= 8){counter = 0;}
                }
                allied = enemy = 0;
                // Right to Left //
                for (int z = 7; z >= 0; z--) {
                    if(z - counter >= 0){
                        if(board.getBoard()[z - counter][y][x] != neutral)
                        {
                            if(board.getBoard()[z - counter][y][x] == color){allied++;}
                            else if(board.getBoard()[z - counter][y][x] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z - counter][y][x] == neutral)
                        {
                            if(allied > enemy && priority < allied){priority = allied; attack = new Move(x, z - allied);}
                            else if(enemy >= allied && priority < enemy){priority = enemy; block = new Move(x, z - enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if(z - counter < 0){counter = 0;}
                }
            }
        }

        allied = enemy = counter = 0;

        // Straight //
        for(int x = 0; x < 8; x++){
            for(int z = 0; z < 8; z++){
                // Top to Bottom //
                for(int y = 6; y <= 0; y--){
                    if(y - counter >= 0){
                        if(board.getBoard()[z][y - counter][x] != neutral)
                        {
                            if(board.getBoard()[z][y - counter][x] == color){allied++;}
                            else if(board.getBoard()[z][y - counter][x] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z][y - counter][x] == neutral)
                        {
                            if(allied > enemy && priority < allied){priority = allied; attack = new Move(x, z);}
                            else if(enemy >= allied && priority < enemy){priority = enemy; block = new Move(x, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(y - counter < 0){counter = 0;}
                }
            }
        }

        allied = enemy = counter = 0;

        // Flat-Diagonal-(/) //
        for(int y = 0; y < 7; y++){
            // Bottom to Top //
            for(int z = 0; z < 8; z++) {
                for (int x = 0; x < 8; x++) {
                    if (x + counter < 8 && z + counter < 8) {
                        if (board.getBoard()[z + counter][y][x + counter] != neutral) {
                            if (board.getBoard()[z + counter][y][x + counter] == color){allied++;}
                            else if (board.getBoard()[z + counter][y][x + counter] == opposition){enemy++;}
                            counter++;
                        } 
                        else if (board.getBoard()[z + counter][y][x + counter] == neutral) {
                            if (allied > enemy && priority < allied) {priority = allied; attack = new Move(x + allied, z + allied);}
                            else if (enemy >= allied && priority < enemy) {priority = enemy; block = new Move(x + enemy, z + enemy);}
                            allied = enemy = 0;
                        }
                    } 
                    else if (x + counter >= 8 && z + counter >= 8){counter = 0;}
                }
            }
            // Top to Bottom //
            for(int z = 7; z >= 0; z--){
                for(int x = 7; x >= 0; x--) {
                    if(x - counter >= 0 && z - counter >= 0){
                        if(board.getBoard()[z - counter][y][x - counter] != neutral)
                        {
                            if(board.getBoard()[z - counter][y][x - counter] == color){allied++;}
                            else if(board.getBoard()[z - counter][y][- + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z - counter][y][x - counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){priority = allied; attack = new Move(x - allied, z - allied);}
                            else if(enemy >= allied && priority < enemy){priority = enemy; block = new Move(x - enemy, z - enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x - counter < 0 && z - counter < 0){counter = 0;}
                }
            }
        }

        allied = enemy = counter = 0;

        // Flat-Diagonal-(\) //
        for(int y = 0; y < 7; y++){
            // Top to Bottom //
            for(int z = 7; z >= 0; z--) {
                for (int x = 0; x < 8; x++) {
                    if (x + counter < 8 && z - counter >= 0) {
                        if (board.getBoard()[z - counter][y][x + counter] != neutral) {
                            if (board.getBoard()[z - counter][y][x + counter] == color){allied++;}
                            else if (board.getBoard()[z - counter][y][x + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if (board.getBoard()[z - counter][y][x + counter] == neutral) {
                            if (allied > enemy && priority < allied) {priority = allied; attack = new Move(x + allied, z - allied);}
                            else if (enemy >= allied && priority < enemy) {priority = enemy; block = new Move(x + enemy, z - enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if (x + counter >= 8 && z - counter < 0){counter = 0;}
                }
            }
            // Bottom to Top //
            for(int z = 0; z < 8; z++){
                for(int x = 7; x >= 0 ; x--) {
                    if(x - counter >= 0 && z + counter < 8){
                        if(board.getBoard()[z + counter][y][x - counter] != neutral)
                        {
                            if(board.getBoard()[z + counter][y][x - counter] == color){allied++;}
                            else if(board.getBoard()[z + counter][y][x - counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z + counter][y][x - counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){priority = allied; attack = new Move(x - allied, z + allied);}
                            else if(enemy >= allied && priority < enemy){priority = enemy; block = new Move(x - enemy, z + enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x - counter < 0 && z + counter >= 8){counter = 0;}
                }
            }
        }

        allied = enemy = counter = 0;

        // 3D-Horizontal-Diagonal //
        for(int z = 0; z < 8; z++) {
            // Left to Right & Bottom to Top //
            for (int y = 6; y >= 0; y--) {
                for (int x = 0; x < 8; x++) {
                    if(x + counter < 8 && y - counter >= 0){
                        if(board.getBoard()[z][y - counter][x + counter] != neutral)
                        {
                            if(board.getBoard()[z][y - counter][x + counter] == color){allied++;}
                            else if(board.getBoard()[z][y - counter][x + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z][y - counter][x + counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x + allied, z);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x + allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x + counter >= 8 && y - counter < 0){counter = 0;}
                }
                allied = enemy = 0;
            }

            // Left to Right & Top to Bottom //
            for (int y = 0; y < 7; y++) {
                for (int x = 0; x < 8; x++) {
                    if(x + counter < 8 && y + counter < 7){
                        if(board.getBoard()[z][y - counter][x + counter] != neutral)
                        {
                            if(board.getBoard()[z][y + counter][x + counter] == color){allied++;}
                            else if(board.getBoard()[z][y + counter][x + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z][y + counter][x + counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x + allied, z);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x + allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x + counter >= 8 && y + counter >= 7){counter = 0;}
                }
                allied = enemy = 0;
            }
            // Right to Left & Bottom to Top //
            for (int y = 6; y >= 0; y--) {
                for (int x = 7; x >= 0; x--) {
                    if(x - counter >= 0 && y - counter >= 0){
                        if(board.getBoard()[z][y - counter][x - counter] != neutral)
                        {
                            if(board.getBoard()[z][y - counter][x - counter] == color){allied++;}
                            else if(board.getBoard()[z][y - counter][x - counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z][y - counter][x - counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x - allied, z);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x - allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x - counter < 0 && y - counter < 0){counter = 0;}
                }
                allied = enemy = 0;
            }

            // Right to Left & Top to Bottom //
            for (int y = 0; y < 7; y++) {
                for (int x = 0; x < 8; x++) {
                    if(x + counter < 8 && y + counter < 6){
                        if(board.getBoard()[z][y + counter][x + counter] != neutral)
                        {
                            if(board.getBoard()[z][y + counter][x + counter] == color){allied++;}
                            else if(board.getBoard()[z][y + counter][x + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z][y + counter][x + counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x + allied, z);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x + allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x + counter >= 8 && y + counter >= 7){counter = 0;}
                }
                allied = enemy = 0;
            }
        }

        allied = enemy = counter = 0;

        // 3D-Vertical-Diagonal //
        for(int x = 0; x < 8; x++) {
            // Bottom to Top (Flat) & Bottom to Top //
            for (int y = 6; y >= 0; y--) {
                for (int z = 0; z < 8; z++) {
                    if(z + counter < 8 && y - counter >= 0){
                        if(board.getBoard()[z + counter][y - counter][x] != neutral)
                        {
                            if(board.getBoard()[z + counter][y - counter][x] == color){allied++;}
                            else if(board.getBoard()[z + counter][y - counter][x] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z + counter][y - counter][x] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x + allied, z);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x + allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(z + counter >= 8 && y - counter < 0){counter = 0;}
                }
                allied = enemy = 0;
            }

            // Bottom to Top (Flat) & Top to Bottom //
            for (int y = 0; y < 7; y++) {
                for (int z = 0; z < 8; z++) {
                    if(z + counter < 8 && y + counter < 7){
                        if(board.getBoard()[z + counter][y - counter][x] != neutral)
                        {
                            if(board.getBoard()[z + counter][y + counter][x] == color){allied++;}
                            else if(board.getBoard()[z + counter][y + counter][x] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z + counter][y + counter][x] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x + allied, z);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x + allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(z + counter >= 8 && y + counter >= 7){counter = 0;}
                }
                allied = enemy = 0;
            }
            // Top to Bottom (Flat) & Bottom to Top //
            for (int y = 6; y >= 0; y--) {
                for (int z = 7; z >= 0; z--) {
                    if(z - counter >= 0 && y - counter >= 0){
                        if(board.getBoard()[z - counter][y - counter][x] != neutral)
                        {
                            if(board.getBoard()[z - counter][y - counter][x] == color){allied++;}
                            else if(board.getBoard()[z - counter][y - counter][x] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z - counter][y - counter][x] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x - allied, z);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x - allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(z - counter < 0 && y - counter < 0){counter = 0;}
                }
                allied = enemy = 0;
            }

            // Top to Bottom (Flat) & Top to Bottom //
            for (int y = 0; y < 7; y++) {
                for (int z = 0; z < 8; z++) {
                    if(z + counter < 8 && y + counter < 6){
                        if(board.getBoard()[z + counter][y + counter][x] != neutral)
                        {
                            if(board.getBoard()[z + counter][y + counter][x] == color){allied++;}
                            else if(board.getBoard()[z + counter][y + counter][x] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z + counter][y + counter][x] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x + allied, z);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x + allied, z);}
                            allied = enemy = 0;
                        }
                    }
                    else if(z + counter >= 8 && y + counter >= 7){counter = 0;}
                }
                allied = enemy = 0;
            }
        }

        allied = enemy = counter = 0;

        // 3D-Diagonal-(/) //

        // Down //
        for(int y = 0; y < 7; y++){
            // Bottom to Top //
            for(int z = 0; z < 8; z++) {
                for (int x = 0; x < 8; x++) {
                    if (x + counter < 8 && z + counter < 8 && y + counter < 7) {
                        if (board.getBoard()[z + counter][y + counter][x + counter] != neutral) {
                            if (board.getBoard()[z + counter][y + counter][x + counter] == color){allied++;}
                            else if (board.getBoard()[z + counter][y + counter][x + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if (board.getBoard()[z + counter][y + counter][x + counter] == neutral) {
                            if (allied > enemy && priority < allied) {}//priority = allied; attack = new Move(x + allied, z + allied);}
                            else if (enemy >= allied && priority < enemy) {}//priority = enemy; block = new Move(x + enemy, z + enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if (x + counter >= 8 && z + counter >= 8 && y + counter >= 7){counter = 0;}
                }
            }
            // Top to Bottom //
            for(int z = 7; z >= 0; z--){
                for(int x = 7; x >= 0; x--) {
                    if(x - counter >= 0 && z - counter >= 0 && y + counter < 7){
                        if(board.getBoard()[z - counter][y + counter][x - counter] != neutral)
                        {
                            if(board.getBoard()[z - counter][y + counter][x - counter] == color){allied++;}
                            else if(board.getBoard()[z - counter][y + counter][- + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z - counter][y + counter][x - counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x - allied, z - allied);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x - enemy, z - enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x - counter < 0 && z - counter < 0 && y + counter >= 7){counter = 0;}
                }
            }
        }

        // Up //
        for(int y = 6; y >= 0; y--){
            // Bottom to Top //
            for(int z = 0; z < 8; z++) {
                for (int x = 0; x < 8; x++) {
                    if (x + counter < 8 && z + counter < 8 && y - counter >= 0) {
                        if (board.getBoard()[z + counter][y - counter][x + counter] != neutral) {
                            if (board.getBoard()[z + counter][y - counter][x + counter] == color){allied++;}
                            else if (board.getBoard()[z + counter][y - counter][x + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if (board.getBoard()[z + counter][y + counter][x + counter] == neutral) {
                            if (allied > enemy && priority < allied) {}//priority = allied; attack = new Move(x + allied, z + allied);}
                            else if (enemy >= allied && priority < enemy) {}//priority = enemy; block = new Move(x + enemy, z + enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if (x + counter >= 8 && z + counter >= 8 && y - counter < 0){counter = 0;}
                }
            }
            // Top to Bottom //
            for(int z = 7; z >= 0; z--){
                for(int x = 7; x >= 0; x--) {
                    if(x - counter >= 0 && z - counter >= 0 && y - counter >= 0){
                        if(board.getBoard()[z - counter][y - counter][x - counter] != neutral)
                        {
                            if(board.getBoard()[z - counter][y - counter][x - counter] == color){allied++;}
                            else if(board.getBoard()[z - counter][y - counter][- + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z - counter][y - counter][x - counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){}//priority = allied; attack = new Move(x - allied, z - allied);}
                            else if(enemy >= allied && priority < enemy){}//priority = enemy; block = new Move(x - enemy, z - enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x - counter < 0 && z - counter < 0 && y - counter < 0){counter = 0;}
                }
            }
        }

        allied = enemy = counter = 0;

        // Flat-Diagonal-(\) //

        // Down //
        for(int y = 0; y < 7; y++){
            // Top to Bottom //
            for(int z = 7; z >= 0; z--) {
                for (int x = 0; x < 8; x++) {
                    if (x + counter < 8 && z - counter >= 0 && y + counter < 7) {
                        if (board.getBoard()[z - counter][y + counter][x + counter] != neutral) {
                            if (board.getBoard()[z - counter][y + counter][x + counter] == color){allied++;}
                            else if (board.getBoard()[z - counter][y + counter][x + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if (board.getBoard()[z - counter][y + counter][x + counter] == neutral) {
                            if (allied > enemy && priority < allied) {priority = allied; attack = new Move(x + allied, z - allied);}
                            else if (enemy >= allied && priority < enemy) {priority = enemy; block = new Move(x + enemy, z - enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if (x + counter >= 8 && z - counter < 0 && y + counter >= 7){counter = 0;}
                }
            }
            // Bottom to Top //
            for(int z = 0; z < 8; z++){
                for(int x = 7; x >= 0 ; x--) {
                    if(x - counter >= 0 && z + counter < 8 && y + counter < 7){
                        if(board.getBoard()[z + counter][y + counter][x - counter] != neutral)
                        {
                            if(board.getBoard()[z + counter][y + counter][x - counter] == color){allied++;}
                            else if(board.getBoard()[z + counter][y + counter][x - counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z + counter][y + counter][x - counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){priority = allied; attack = new Move(x - allied, z + allied);}
                            else if(enemy >= allied && priority < enemy){priority = enemy; block = new Move(x - enemy, z + enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x - counter < 0 && z + counter >= 8 && y + counter >= 7){counter = 0;}
                }
            }
        }

        // Up //
        for(int y = 6; y >= 0; y--){
            // Top to Bottom //
            for(int z = 7; z >= 0; z--) {
                for (int x = 0; x < 8; x++) {
                    if (x + counter < 8 && z - counter >= 0 && y - counter >= 0) {
                        if (board.getBoard()[z - counter][y - counter][x + counter] != neutral) {
                            if (board.getBoard()[z - counter][y - counter][x + counter] == color){allied++;}
                            else if (board.getBoard()[z - counter][y - counter][x + counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if (board.getBoard()[z - counter][y - counter][x + counter] == neutral) {
                            if (allied > enemy && priority < allied) {priority = allied; attack = new Move(x + allied, z - allied);}
                            else if (enemy >= allied && priority < enemy) {priority = enemy; block = new Move(x + enemy, z - enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if (x + counter >= 8 && z - counter < 0 && y - counter >= 0){counter = 0;}
                }
            }
            // Bottom to Top //
            for(int z = 0; z < 8; z++){
                for(int x = 7; x >= 0 ; x--) {
                    if(x - counter >= 0 && z + counter < 8 && y - counter >= 0){
                        if(board.getBoard()[z + counter][y - counter][x - counter] != neutral)
                        {
                            if(board.getBoard()[z + counter][y - counter][x - counter] == color){allied++;}
                            else if(board.getBoard()[z + counter][y - counter][x - counter] == opposition){enemy++;}
                            counter++;
                        }
                        else if(board.getBoard()[z + counter][y - counter][x - counter] == neutral)
                        {
                            if(allied > enemy && priority < allied){priority = allied; attack = new Move(x - allied, z + allied);}
                            else if(enemy >= allied && priority < enemy){priority = enemy; block = new Move(x - enemy, z + enemy);}
                            allied = enemy = 0;
                        }
                    }
                    else if(x - counter < 0 && z + counter >= 8 && y - counter >= 0){counter = 0;}
                }
            }
        }

        return priority;
    }

    @Override
    public Player freshCopy(){return new P3_AI_SE_AC(board, color);}
}
