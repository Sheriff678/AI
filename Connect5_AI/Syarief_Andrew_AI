public class Syarief_Andrew_AI
{
    private char color;
    private Board board;
    private Move move;
    private int row;
    private int col;

    public Syarief_Andrew_AI(Board board, char color)
    {
        this.board = board;
        this.color = color;
    }

    public Move getMove()
    {
        return move;
    }

    public int BoardGrader(Board grid)
    {
        /* -----------Scoring-----------
         * Blank spaces :              1
         * Occupied spaces :           0
         * Potential wins :            4
         * Potential losses:          -4
         */



        char[][][] b = grid.getBoard();
        char opposition = ' ';
        int score = 0;

        if (color == 'R')
            opposition = 'B';

        else if (color == 'B')
            opposition = 'R';

        //----------Horizontal-LEFT-RIGHT---------//
        for (char[][] z : b) {
            for (char[] row : z) {
                for (int x = 0; x + 4 < row.length; x++)
                {

                }
            }
        }

        //----------Vertical---------//
        for (int z = 0; z + 4 < Board.Z_SIZE; z++)
        {
            for (int y = 0; y < Board.Y_SIZE; y++)
            {
                for (int x = 0; x < Board.X_SIZE; x++)
                {

                }
            }
        }

        //----------Horizontal-UP-DOWN---------//
        for (char[][] z : b)
        {
            for (int y = 0; y + 4 < Board.Y_SIZE; y++)
            {
                for (int x = 0; x < Board.X_SIZE; x++)
                {

                }
            }
        }

        //---------Diagonal-UP-DOWN-------//
        for (int z = 0; z + 4 < Board.Z_SIZE; z++)
        {
            for (int y = 0; y < Board.Y_SIZE; y++)
            {
                for (int x = 0; x + 4 < Board.X_SIZE; x++)
                {

                }
            }
        }

        //---------Diagonal-DOWN-UP-------//
        for (int z = Board.Z_SIZE - 1; z - 4 > 0; z--)
        {
            for (int y = 0; y < Board.Y_SIZE; y++)
            {
                for (int x = 0; x + 4 < Board.X_SIZE; x++)

                {

                }
            }
        }

        //--------V-Diagonal-UP-DOWN-WALL-1----//
        for (char[][] z : b)
        {
            for (int y = 0; y + 4 < Board.Y_SIZE; y++)
            {
                for (int x = 0; x + 4 < Board.X_SIZE; x++)
                {

                }
            }
        }

        //--------V-Diagonal-DOWN-UP-WALL-1----//
        for (char[][] z : b)
        {
            for (int y = Board.Y_SIZE - 1; y - 4 > 0; y--)
            {
                for (int x = 0; x + 4 < Board.X_SIZE; x++)
                {

                }
            }
        }

        //--------V-Diagonal-DOWN-UP-WALL-2----//
        for (int z = Board.Z_SIZE - 1; z - 4 > 0; z--)
        {
            for (int y = Board.Y_SIZE - 1; y - 4 > 0; y--)
            {
                for (int x = 0; x < Board.X_SIZE; x++)
                {

                }
            }
        }

        //--------V-Diagonal--UP-DOWN-WALL-2---//
        for (int z = 0; z + 4 < Board.Z_SIZE; z++)
        {
            for (int y = Board.Y_SIZE - 1; y - 4 > 0; y--)
            {
                for (int x = 0; x < Board.X_SIZE; x++)
                {

                }
            }
        }

        //--------V-IDK-ANYMORE---------//
        for (int z = Board.Z_SIZE - 1; z - 4 > 0; z--) {
            for (int y = Board.Y_SIZE - 1; y - 4 > 0; y--)
            {
                for (int x = 0; x + 4 < Board.X_SIZE; x++)
                {

                }
            }
        }

        //--------V-IDK-ANYMORE-2--------//
        for (int z = Board.Z_SIZE - 1; z - 4 > 0; z--)
        {
            for (int y = 0; y + 4 < Board.Y_SIZE; y++)
            {
                for (int x = 0; x + 4 < Board.X_SIZE; x++)
                {

                }
            }
        }

        //--------V-WTF-AM-I-DOING-------//
        for (int z = 0; z + 4 < Board.Z_SIZE; z++)
        {
            for (int y = 0; y + 4 < Board.Y_SIZE; y++)
            {
                for (int x = 0; x + 4 < Board.X_SIZE; x++)
                {

                }
            }
        }

        //--------V-WTF-AM-I-DOING-2-----//
        for (int z = 0; z + 4 < Board.Z_SIZE; z++)
        {
            for (int y = Board.Y_SIZE - 1; y - 4 > 0; y--)
            {
                for (int x = 0; x + 4 < Board.X_SIZE; x++)
                {

                }
            }
        }

        return score;
    }

    /*public Move FinalizeMove(int col, int row)
    {
        //returns best move
        ;
    }*/
}
