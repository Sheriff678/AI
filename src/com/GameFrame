package com.company;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.applet.*;
import java.io.File;
import java.net.URL;
import java.util.Arrays;
import java.util.Scanner;
import java.util.ArrayList;

public class GameFrame extends JFrame implements Runnable, KeyListener//, MouseListener
{

    public static final int UPS = 60;

    private BufferedImage buffer;
    private double timeBetweenUpdates = 1000.0/UPS;
    private Board b;
    private HumanPlayer hp1, hp2;
    private RandomComputer rc;
    private int qwerty = (int)(Math.random()*2)+1;

    public GameFrame()
    {
        super();
        Scanner input = new Scanner(System.in);
        addKeyListener(this);
        //addMouseListener(this);
        setSize(212, 962);
        setUndecorated(false);

        buffer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
        b = new Board();

        //-----------------------GAME-START--------------------------//
        System.out.print("Enter name player 1: ");
        String name1 = input.next();
        System.out.print("\n");

        ///*
        System.out.print("Enter name player 2: ");
        String name2 = input.next();
        System.out.print("\n");
        //*/

        int color = (int)(Math.random()*2)+1;

        if(color == 1)
        {
            hp1 = new HumanPlayer(name1, b.RED);
            hp2 = new HumanPlayer(name2, b.BLUE);
            //rc = new RandomComputer("Bot", b.BLUE);
        }
        else if(color == 2)
        {
            hp1 = new HumanPlayer(name1, b.BLUE);
            hp2 = new HumanPlayer(name2, b.RED);
            //rc = new RandomComputer("Bot", b.RED);
        }

        System.out.println("<---COLORS---> \nBlue-B\tRed-R\n");
        System.out.println("Player 1: " + hp1.getName() + "\nPlayer Color: " + hp1.getLetter() + "\n");
        System.out.println("Player 2: " + hp2.getName() + "\nPlayer Color: " + hp2.getLetter() + "\n");
        //System.out.println("Player 2: " + rc.getName() + "\nPlayer Color: " + rc.getLetter() + "\n");

        try
        {
            Thread.sleep(1000);
            System.out.print("INITIALIZING");
            Thread.sleep(500);
            System.out.print(" . ");
            Thread.sleep(500);
            System.out.print(" . ");
            Thread.sleep(500);
            System.out.print(" . \n\n");

        } catch (InterruptedException e) { }

        setVisible(true);

        Thread t = new Thread(this);
        t.start();
    }

    public void paint(Graphics g)
    {
        Graphics bg = buffer.getGraphics();
        b.draw(bg);
        g.drawImage(buffer, 0, 0, null);
    }

    @Override
    public void run()
    {
        while(true)
        {
            repaint();
            update();
            try
            {
                Thread.sleep(500);
            }
            catch(Exception e)
            {}
        }
    }
    
     public void win()
    {
        char[][][] grid = b.getBoard();


        //----------Horizontal-LEFT-RIGHT---------//
        for(int z=0; z<Board.Z_SIZE; z++)
        {

            for(int y=0; y<Board.Y_SIZE; y++)
            {
                int countRed = 0;
                int countBlue = 0;

                for(int x=0; x<Board.X_SIZE; x++)
                {
                    if(grid[z][y][x] == Board.RED)
                        countRed++;

                    else if(grid[z][y][x] == Board.BLUE)
                        countBlue++;
                }

                if(countBlue == 5)
                {
                    b.setWinner(Board.BLUE);
                    break;
                }

                else if(countRed == 5)
                {
                    b.setWinner(Board.RED);
                    break;
                }
            }
        }

        //----------Vertical---------//
        for(int z=0; z<Board.Z_SIZE; z++)
        {
            int countRed = 0;
            int countBlue = 0;

            for(int x=0; x<Board.X_SIZE; x++)
            {


                for(int y=0; y<Board.Y_SIZE; y++)
                {
                    if(grid[z][x][y] == Board.RED)
                        countRed++;

                    else if(grid[z][x][y] == Board.BLUE)
                        countBlue++;
                }

                if(countBlue == 5)
                {
                    b.setWinner(Board.BLUE);
                    break;
                }

                else if(countRed == 5)
                {
                    b.setWinner(Board.RED);
                    break;
                }
            }
        }

        //----------Horizontal-UP-DOWN---------//
        int countRed = 0;
        int countBlue = 0;

        for(int y=0; y<Board.Y_SIZE; y++)
        {
            for(int x=0; x<Board.X_SIZE; x++)
            {
                for(int z=0; z<Board.Z_SIZE; z++)
                {
                    if(grid[x][y][z] == Board.RED)
                        countRed++;

                    else if(grid[x][y][z] == Board.BLUE)
                        countBlue++;
                }

                if(countBlue == 5)
                {
                    b.setWinner(Board.BLUE);
                    break;
                }

                else if(countRed == 5)
                {
                    b.setWinner(Board.RED);
                    break;
                }
            }
        }

        //----------DIAGONAL---------//
        countRed = 0;
        countBlue = 0;

        for(int y=0; y<Board.Y_SIZE; y++)
        {
            for(int x=0; x<Board.X_SIZE; x++)
            {
                for(int z=0; z<Board.Z_SIZE; z++)
                {
                    if(x+1 < 8 && z+1 < 8)
                    {
                        if(grid[x+1][y][z+1] == Board.RED)
                        {
                            countRed++;
                        }
                        else if(grid[x+1][y][z+1] == Board.BLUE)
                        {
                            countBlue++;
                        }
                    }

                    if(x-1 >= 0 && z-1 >= 0)
                    {
                        if(grid[x-1][y][z-1] == Board.RED)
                        {
                            countRed++;
                        }
                        else if(grid[x-1][y][z-1] == Board.BLUE)
                        {
                            countBlue++;
                        }
                    }
                }

                if(countBlue == 5)
                {
                    b.setWinner(Board.BLUE);
                    break;
                }

                else if(countRed == 5)
                {
                    b.setWinner(Board.RED);
                    break;
                }
            }
        }
    }

    public void update()
    {
        if(qwerty == 1)
        {
            System.out.println("\n"+hp1.getName()+"'s turn");
            b.makeMove(hp1.getMove(b), hp1.getLetter());
            qwerty = 2;
        }
        else if(qwerty == 2)
        {
            //System.out.println("\n"+rc.getName()+"'s turn");
            //b.makeMove(rc.getMove(b), rc.getLetter());
            System.out.println("\n"+hp2.getName()+"'s turn");
            b.makeMove(hp2.getMove(b), hp2.getLetter());
            qwerty = 1;
        }
    }

    @Override
    public void keyTyped(KeyEvent e)
    {

    }

    @Override
    public void keyPressed(KeyEvent e)
    {
        if(e.getKeyCode() == KeyEvent.VK_ESCAPE)
            System.exit(0);

        if(e.getKeyCode() == KeyEvent.VK_P)
            for(int y = 0; y < 7; y++)
            {
                for(int z = 0; z < 8; z++)
                {
                    for(int x = 0; x < 8; x++)
                    {
                        System.out.print("["+b.getBoard()[z][y][x]+"]");
                    }
                    System.out.print("\n");
                }
                System.out.println("------------------------");
            }
    }

    @Override
    public void keyReleased(KeyEvent e)
    {

    }

    /*
    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }*/
}
