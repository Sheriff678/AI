

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.applet.*;
import java.io.File;
import java.net.URL;
import java.util.Arrays;
import java.util.Scanner;
import java.util.ArrayList;

public class GameFrame extends JFrame implements Runnable, KeyListener//, MouseListener
{

    public static final int UPS = 60;

    private BufferedImage buffer;
    private double timeBetweenUpdates = 1000.0/UPS;
    private Board b;
    private HumanPlayer hp1, hp2;
    private RandomComputer rc;
    private int qwerty = (int)(Math.random()*2)+1;

    public GameFrame()
    {
        super();
        Scanner input = new Scanner(System.in);
        addKeyListener(this);
        //addMouseListener(this);
        setSize(212, 962);
        setUndecorated(true);

        buffer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
        b = new Board();

        //-----------------------GAME-START--------------------------//
        System.out.print("Enter name player 1: ");
        String name1 = input.next();
        System.out.print("\n");

        ///*
        System.out.print("Enter name player 2: ");
        String name2 = input.next();
        System.out.print("\n");
        //*/

        int color = (int)(Math.random()*2)+1;

        if(color == 1)
        {
            hp1 = new HumanPlayer(name1, b.RED);
            hp2 = new HumanPlayer(name2, b.BLUE);
            //rc = new RandomComputer("Bot", b.BLUE);
        }
        else if(color == 2)
        {
            hp1 = new HumanPlayer(name1, b.BLUE);
            hp2 = new HumanPlayer(name2, b.RED);
            //rc = new RandomComputer("Bot", b.RED);
        }

        System.out.println("<---COLORS---> \nBlue-B\tRed-R\n");
        System.out.println("Player 1: " + hp1.getName() + "\nPlayer Color: " + hp1.getLetter() + "\n");
        System.out.println("Player 2: " + hp2.getName() + "\nPlayer Color: " + hp2.getLetter() + "\n");
        //System.out.println("Player 2: " + rc.getName() + "\nPlayer Color: " + rc.getLetter() + "\n");

        try
        {
            System.out.print("INITIALIZING");
            Thread.sleep(500);
            System.out.print(" . ");
            Thread.sleep(500);
            System.out.print(" . ");
            Thread.sleep(500);
            System.out.print(" . \n\n");

        } catch (InterruptedException e) { }

        setVisible(true);

        Thread t = new Thread(this);
        t.start();
    }

    public void paint(Graphics g)
    {
        Graphics bg = buffer.getGraphics();
        b.draw(bg);
        g.drawImage(buffer, 0, 0, null);
    }

    @Override
    public void run()
    {
        while(true)
        {
            repaint();
            update();
            try
            {
                Thread.sleep(500);
            }
            catch(Exception e)
            {}
        }
    }

    public void win()
    {
        char[][][] grid = b.getBoard();


        //----------Horizontal-LEFT-RIGHT---------//
        for(char[][] z: grid)
        {
            for(char[] row: z)
            {
                for(int c=0; c+4 < row.length; c++)
                {
                    if(row[c] == Board.RED && row[c+1] == Board.RED && row[c+2] == Board.RED &&
                        row[c+3] == Board.RED && row[c+4] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(row[c] == Board.BLUE && row[c+1] == Board.BLUE && row[c+2] == Board.BLUE &&
                            row[c+3] == Board.BLUE && row[c+4] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //----------Vertical---------//
        for(int z=0; z+4 < Board.Z_SIZE; z++)
        {
            for(int y=0; y < Board.Y_SIZE; y++)
            {
                for(int x=0; x < Board.X_SIZE; x++)
                {
                    if(grid[z][y][x] == Board.RED && grid[z+1][y][x] == Board.RED && grid[z+2][y][x] == Board.RED &&
                        grid[z+3][y][x] == Board.RED && grid[z+4][y][x] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(grid[z][y][x] == Board.BLUE && grid[z+1][y][x] == Board.BLUE && grid[z+2][y][x] == Board.BLUE &&
                            grid[z+3][y][x] == Board.BLUE && grid[z+4][y][x] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //----------Horizontal-UP-DOWN---------//
        for(char[][] z: grid)
        {
            for(int y=0; y+4 < Board.Y_SIZE; y++)
            {
                for(int x=0; x < Board.X_SIZE; x++)
                {
                    if(z[y][x] == Board.RED && z[y+1][x] == Board.RED && z[y+2][x] == Board.RED &&
                            z[y+3][x] == Board.RED && z[y+4][x] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(z[y][x] == Board.BLUE && z[y+1][x] == Board.BLUE && z[y+2][x] == Board.BLUE &&
                            z[y+3][x] == Board.BLUE && z[y+4][x] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //---------Diagonal-UP-DOWN-------//
        for(int z=0; z+4 < Board.Z_SIZE; z++)
        {
            for(int y=0; y < Board.Y_SIZE; y++)
            {
                for(int x=0; x+4 < Board.X_SIZE; x++)
                {
                    if(grid[z][y][x] == Board.RED && grid[z+1][y][x+1] == Board.RED && grid[z+2][y][x+2] == Board.RED &&
                            grid[z+3][y][x+3] == Board.RED && grid[z+4][y][x+4] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(grid[z][y][x] == Board.BLUE && grid[z+1][y][x+1] == Board.BLUE && grid[z+2][y][x+2] == Board.BLUE &&
                            grid[z+3][y][x+3] == Board.BLUE && grid[z+4][y][x+4] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //---------Diagonal-DOWN-UP-------//
        for(int z=Board.Z_SIZE-1; z-4 > 0; z--)
        {
            for(int y=0; y < Board.Y_SIZE; y++)
            {
                for(int x=0; x+4 < Board.X_SIZE; x++)
                {
                    if(grid[z][y][x] == Board.RED && grid[z-1][y][x+1] == Board.RED && grid[z-2][y][x+2] == Board.RED &&
                            grid[z-3][y][x+3] == Board.RED && grid[z-4][y][x+4] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(grid[z][y][x] == Board.BLUE && grid[z-1][y][x+1] == Board.BLUE && grid[z-2][y][x+2] == Board.BLUE &&
                            grid[z-3][y][x+3] == Board.BLUE && grid[z-4][y][x+4] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //--------V-Diagonal-UP-DOWN-WALL------//
        for(char[][] z: grid)
        {
            for(int y=0; y+4 < Board.Y_SIZE; y++)
            {
                for(int x=0; x+4 < Board.X_SIZE; x++)
                {
                    if(z[y][x] == Board.RED && z[y+1][x+1] == Board.RED && z[y+2][x+2] == Board.RED &&
                            z[y+3][x+3] == Board.RED && z[y+4][x+4] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(z[y][x] == Board.BLUE && z[y+1][x+1] == Board.BLUE && z[y+2][x=2] == Board.BLUE &&
                            z[y+3][x=3] == Board.BLUE && z[y+4][x=4] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //--------V-Diagonal-DOWN-UP-WALL------//
        for(char[][] z: grid)
        {
            for(int y=Board.Y_SIZE-1; y-4 > 0; y--)
            {
                for(int x=0; x+4 < Board.X_SIZE; x++)
                {
                    if(z[y][x] == Board.RED && z[y-1][x+1] == Board.RED && z[y-2][x+2] == Board.RED &&
                            z[y-3][x+3] == Board.RED && z[y-4][x+4] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(z[y][x] == Board.BLUE && z[y-1][x+1] == Board.BLUE && z[y-2][x=2] == Board.BLUE &&
                            z[y-3][x=3] == Board.BLUE && z[y-4][x=4] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //--------V-Diagonal-DOWN-UP------//
        for(int z=Board.Z_SIZE-1; z-4 > 0; z--)
        {
            for(int y=Board.Y_SIZE-1; y-4 > 0; y--)
            {
                for(int x=0; x < Board.X_SIZE; x++)
                {
                    if(grid[z][y][x] == Board.RED && grid[z-1][y-1][x] == Board.RED && grid[z-2][y-2][x] == Board.RED &&
                            grid[z-3][y-3][x] == Board.RED && grid[z-4][y-4][x] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(grid[z][y][x] == Board.BLUE && grid[z-1][y-1][x] == Board.BLUE && grid[z-2][y-2][x] == Board.BLUE &&
                            grid[z-3][y-3][x] == Board.BLUE && grid[z-4][y-4][x] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //--------V-Diagonal--UP-DOWN-----//
        for(int z=0; z+4 > Board.Z_SIZE; z++)
        {
            for(int y=Board.Y_SIZE-1; y-4 > 0; y--)
            {
                for(int x=0; x < Board.X_SIZE; x++)
                {
                    if(grid[z][y][x] == Board.RED && grid[z+1][y-1][x] == Board.RED && grid[z+2][y-2][x] == Board.RED &&
                            grid[z+3][y-3][x] == Board.RED && grid[z+4][y-4][x] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(grid[z][y][x] == Board.BLUE && grid[z+1][y-1][x] == Board.BLUE && grid[z+2][y-2][x] == Board.BLUE &&
                            grid[z+3][y-3][x] == Board.BLUE && grid[z+4][y-4][x] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //--------V-IDK-ANYMORE---------//
        for(int z=Board.Z_SIZE-1; z-4 > 0; z--)
        {
            for(int y=Board.Y_SIZE-1; y-4 > 0; y--)
            {
                for(int x=0; x+4 < Board.X_SIZE; x++)
                {
                    if(grid[z][y][x] == Board.RED && grid[z-1][y-1][x+1] == Board.RED && grid[z-2][y-2][x+2] == Board.RED &&
                            grid[z-3][y-3][x+3] == Board.RED && grid[z-4][y-4][x+4] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(grid[z][y][x] == Board.BLUE && grid[z-1][y-1][x+1] == Board.BLUE && grid[z-2][y-2][x+2] == Board.BLUE &&
                            grid[z-3][y-3][x+3] == Board.BLUE && grid[z-4][y-4][x+4] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

        //--------V-IDK-ANYMORE-2--------//
        for(int z=Board.Z_SIZE-1; z-4 > 0; z--)
        {
            for(int y=0; y+4 < Board.Y_SIZE; y++)
            {
                for(int x=0; x+4 < Board.X_SIZE; x++)
                {
                    if(grid[z][y][x] == Board.RED && grid[z-1][y+1][x+1] == Board.RED && grid[z-2][y+2][x+2] == Board.RED &&
                            grid[z-3][y+3][x+3] == Board.RED && grid[z-4][y+4][x+4] == Board.RED)
                        b.setWinner(Board.RED);

                    else if(grid[z][y][x] == Board.BLUE && grid[z-1][y+1][x+1] == Board.BLUE && grid[z-2][y+2][x+2] == Board.BLUE &&
                            grid[z-3][y+3][x+3] == Board.BLUE && grid[z-4][y+4][x+4] == Board.BLUE)
                        b.setWinner(Board.BLUE);
                }
            }
        }

    }

    public void update()
    {
        if(b.getWinner() == Board.PLAYING)
        {
            if(qwerty == 1)
            {
                System.out.println("\n" + hp1.getName() + "'s turn");
                b.makeMove(hp1.getMove(b), hp1.getLetter());
                qwerty = 2;
            }

            else if (qwerty == 2)
            {
                //System.out.println("\n"+rc.getName()+"'s turn");
                //b.makeMove(rc.getMove(b), rc.getLetter());
                System.out.println("\n" + hp2.getName() + "'s turn");
                b.makeMove(hp2.getMove(b), hp2.getLetter());
                qwerty = 1;
            }

            win();
        }

        else
        {
            if(b.getWinner() == Board.BLUE)
            {
                try
                {
                    System.out.println("Congratulations!!!");
                    Thread.sleep(500);
                    System.out.println("Blue player has won!\n");
                    Thread.sleep(500);
                    System.out.print("Resetting");
                    Thread.sleep(500);
                    System.out.print(" . ");
                    Thread.sleep(500);
                    System.out.print(" . ");
                    Thread.sleep(500);
                    System.out.print(" .");

                    b.reset();
                    b.setWinner(Board.PLAYING);

                }
                catch (InterruptedException e) { }
            }

            else if(b.getWinner() == Board.RED)
            {
                try
                {
                    System.out.println("Congratulations!!!");
                    Thread.sleep(500);
                    System.out.println("Red player has won!\n");
                    Thread.sleep(500);
                    System.out.print("Resetting");
                    Thread.sleep(500);
                    System.out.print(" . ");
                    Thread.sleep(500);
                    System.out.print(" . ");
                    Thread.sleep(500);
                    System.out.print(" .");

                    b.reset();
                    b.setWinner(Board.PLAYING);

                }
                catch (InterruptedException e) { }
            }
        }

    }

    @Override
    public void keyTyped(KeyEvent e)
    {

    }

    @Override
    public void keyPressed(KeyEvent e)
    {
        if(e.getKeyCode() == KeyEvent.VK_ESCAPE)
            System.exit(0);

        if(e.getKeyCode() == KeyEvent.VK_R)
        {
            b.reset();
            b.setWinner(Board.PLAYING);
        }

        if(e.getKeyCode() == KeyEvent.VK_P)
            for(int y = 0; y < 7; y++)
            {
                for(int z = 0; z < 8; z++)
                {
                    for(int x = 0; x < 8; x++)
                    {
                        System.out.print("["+b.getBoard()[z][y][x]+"]");
                    }
                    System.out.print("\n");
                }
                System.out.println("------------------------");
            }
    }

    @Override
    public void keyReleased(KeyEvent e)
    {

    }

    /*
    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }*/
}
